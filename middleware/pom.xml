<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.qunce</groupId>
    <artifactId>middleware</artifactId>
    <packaging>pom</packaging>


    <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型-->
    <!--<packaging>jar</packaging>-->

    <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->
    <version>1.0-SNAPSHOT</version>

    <name>banseon-maven</name>
    <!--项目主页的URL, Maven产生的文档用-->
    <url>http://www.baidu.com/banseon</url>
    <!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。-->
    <description>A maven project to study maven.</description>
    <!--描述了这个项目构建环境中的前提条件。-->
    <prerequisites>
        <!--构建该项目或使用该插件所需要的Maven的最低版本-->
        <maven/>
    </prerequisites>
    <!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira-->
    <issueManagement>
        <!--问题管理系统（例如jira）的名字，-->
        <system>jira</system>
        <!--该项目使用的问题管理系统的URL-->
        <url>http://jira.baidu.com/banseon</url>
    </issueManagement>
    <!--项目持续集成信息-->
    <ciManagement>
        <!--持续集成系统的名字，例如continuum-->
        <system/>
        <!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。-->
        <url/>
        <!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）-->
        <notifiers>
            <!--配置一种方式，当构建中断时，以该方式通知用户/开发者-->
            <notifier>
                <!--传送通知的途径-->
                <type>email</type>
                <!--发生错误时是否通知-->
                <sendOnError>true</sendOnError>
                <!--构建失败时是否通知-->
                <sendOnFailure>true</sendOnFailure>
                <!--构建成功时是否通知-->
                <sendOnSuccess>true</sendOnSuccess>
                <!--发生警告时是否通知-->
                <sendOnWarning>true</sendOnWarning>
                <!--不赞成使用。通知发送到哪里-->
                <address>m18967896507_1@163.com</address>
                <!--扩展配置项-->
                <configuration/>
            </notifier>
        </notifiers>
    </ciManagement>

    <!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。-->
    <inceptionYear/>
    <!--项目相关邮件列表信息-->
    <mailingLists>
        <!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。-->
        <mailingList>
            <!--邮件的名称-->
            <name>Demo</name>
            <!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->
            <post>banseon@126.com</post>
            <!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->
            <subscribe>banseon@126.com</subscribe>
            <!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->
            <unsubscribe>banseon@126.com</unsubscribe>
            <!--你可以浏览邮件信息的URL-->
            <archive>http:/hi.baidu.com/banseon/demo/dev/</archive>
        </mailingList>
    </mailingLists>

    <!--项目开发者列表-->
    <developers>
        <!--某个项目开发者的信息-->
        <developer>
            <!--SCM里项目开发者的唯一标识符-->
            <id>HELLO WORLD</id>
            <!--项目开发者的全名-->
            <name>banseon</name>
            <!--项目开发者的email-->
            <email>banseon@126.com</email>
            <!--项目开发者的主页的URL-->
            <url/>
            <!--项目开发者在项目中扮演的角色，角色元素描述了各种角色-->
            <roles>
                <role>Project Manager</role>
                <role>Architect</role>
            </roles>
            <!--项目开发者所属组织-->
            <organization>demo</organization>
            <!--项目开发者所属组织的URL-->
            <organizationUrl>http://hi.baidu.com/banseon</organizationUrl>
            <!--项目开发者属性，如即时消息如何处理等-->
            <properties>
                <dept>No</dept>
            </properties>
            <!--项目开发者所在时区， -11到12范围内的整数。-->
            <timezone>-5</timezone>
        </developer>
    </developers>

    <!--项目的其他贡献者列表-->
    <contributors>
        <!--项目的其他贡献者。参见developers/developer元素-->
        <contributor>
            <name/>
            <email/>
            <url/>
            <organization/>
            <organizationUrl/>
            <roles/>
            <timezone/>
            <properties/>
        </contributor>
    </contributors>
    <!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。-->
    <licenses>
        <!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。-->
        <license>
            <!--license用于法律上的名称-->
            <name>Apache 2</name>
            <!--官方的license正文页面的URL-->
            <url>http://www.baidu.com/banseon/LICENSE-2.0.txt</url>
            <!--项目分发的主要方式：
                    repo，可以从Maven库下载
                    manual， 用户必须手动下载和安装依赖-->
            <distribution>repo</distribution>
            <!--关于license的补充信息-->
            <comments>A business-friendly OSS license</comments>
        </license>
    </licenses>

    <!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。-->
    <scm>
        <!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。-->
        <connection>scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</connection>
        <!--给开发者使用的，类似connection元素。即该连接不仅仅只读-->
        <developerConnection>scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk</developerConnection>
        <!--当前代码的标签，在开发阶段默认为HEAD-->
        <tag/>
        <!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。-->
        <url>http://svn.baidu.com/banseon</url>
    </scm>
    <!--描述项目所属组织的各种属性。Maven产生的文档用-->
    <organization>
        <!--组织的全名-->
        <name>demo</name>
        <!--组织主页的URL-->
        <url>http://www.baidu.com/banseon</url>
    </organization>

    <modules>
        <module>kafka</module>
        <module>undertow</module>
        <module>sharding-sphere</module>
        <module>iot/dcim</module>
        <module>spring/springmvc</module>
        <module>spring/spring-core</module>
        <module>spring/spring-context</module>
        <module>spring/spring-beans</module>
        <module>cache/redis-client</module>
        <module>spring/jpa</module>
        <module>cache/caffeine</module>
        <module>conn-pool/druid</module>
        <module>task-scheduling</module>
        <module>springboot/redis</module>
        <module>spring/spring-data-influxdb</module>
        <module>vert.x/core</module>
        <module>vert.x/sql-client-templates</module>
        <module>vert.x/vertx-pg-client</module>
        <module>template</module>
    </modules>

    <properties>
        <spring-boot.version>2.1.1.RELEASE</spring-boot.version>
        <kafka-clients.version>2.6.0</kafka-clients.version>
        <jackson-databind.version>2.9.5</jackson-databind.version>
        <jsr305.version>3.0.2</jsr305.version>
        <undertow.version>2.1.0.Final</undertow.version>
        <lombok.version>1.18.12</lombok.version>


        
        <lombok.version>1.18.12</lombok.version>
        <letture.version>6.0.1.RELEASE</letture.version>

        <compiler.version>3.0</compiler.version>

        <junit.version>4.12</junit.version>
        <junit-jupiter.version>5.0.2</junit-jupiter.version>
        <junit-vintage.version>${junit.version}.2</junit-vintage.version>

    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <!-- 单元测试 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-quartz</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka-clients</artifactId>
                <version>${kafka-clients.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka-streams</artifactId>
                <version>${kafka-clients.version}</version>
            </dependency>

            <dependency>
                <groupId>io.undertow</groupId>
                <artifactId>undertow-core</artifactId>
                <version>${undertow.version}</version>
            </dependency>
            <dependency>
                <groupId>io.undertow</groupId>
                <artifactId>undertow-servlet</artifactId>
                <version>${undertow.version}</version>
            </dependency>
            <dependency>
                <groupId>io.undertow</groupId>
                <artifactId>undertow-websockets-jsr</artifactId>
                <version>${undertow.version}</version>
            </dependency>


            <!-- shardingSphere -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>8.0.21</version>
            </dependency>
            <dependency>
                <groupId>org.apache.shardingsphere</groupId>
                <artifactId>shardingsphere-jdbc-core</artifactId>
                <version>${sharding-jdbc.version}</version>
            </dependency>

            <!-- cache -->
            <dependency>
                <groupId>io.lettuce</groupId>
                <artifactId>lettuce-core</artifactId>
                <version>${letture.version}</version>
            </dependency>

            <!-- 单元测试 -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit-jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-params</artifactId>
                <version>${junit-jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-migrationsupport</artifactId>
                <version>${junit-jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
                <version>${junit-vintage.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson-databind.version}</version>
            </dependency>

  <dependency>
                <groupId>com.google.code.findbugs</groupId>
                <artifactId>jsr305</artifactId>
                <version>${jsr305.version}</version>
            </dependency>
            <!-- jpa -->
            <dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-bom</artifactId>
                <version>2020.0.1</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <!-- apache commons -->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.6</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.10</version>
            </dependency>
            <!-- Gson -->
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>2.8.6</version>
            </dependency>

            <!-- 任务调度 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-quartz</artifactId>
            </dependency>
        </dependencies>



    </dependencyManagement>
    <!--构建项目需要的信息-->
    <build>
        <!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->
        <!--<sourceDirectory>-->
        <!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。-->
        <!--<scriptSourceDirectory/>-->
        <!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->
        <!--<testSourceDirectory/>-->
        <!--被编译过的应用程序class文件存放的目录。-->
        <!--<outputDirectory/>-->
        <!--被编译过的测试class文件存放的目录。-->
        <!--<testOutputDirectory/>-->
        <!--使用来自该项目的一系列构建扩展-->
        <!--<extensions>-->
            <!--描述使用到的构建扩展。-->
            <!--<extension>-->
                <!--构建扩展的groupId-->
                <!--<groupId/>-->
                <!--构建扩展的artifactId-->
                <!--<artifactId/>-->
                <!--构建扩展的版本-->
                <!--<version/>-->
            <!--</extension>-->
        <!--</extensions>-->
        <!--当项目没有规定目标（Maven2 叫做阶段）时的默认值-->
        <!--<defaultGoal/>-->
        <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。-->
        <resources>
            <!--这个元素描述了项目相关或测试相关的所有资源路径-->
            <resource>
                <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。-->
                <!--<targetPath/>-->
                <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。-->
                <!--<filtering/>-->
                <!--描述存放资源的目录，该路径相对POM路径-->
                <!--<directory/>-->
                <!--包含的模式列表，例如**/*.xml.-->
                <includes/>
                <!--排除的模式列表，例如**/*.xml-->
                <excludes/>
            </resource>
        </resources>
        <!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。-->
        <testResources>
            <!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明-->
            <testResource>
                <!--<targetPath/>-->
                <!--<filtering/>-->
                <!--<directory/>-->
                <includes/>
                <excludes/>
            </testResource>
        </testResources>
        <!--构建产生的所有文件存放的目录-->
        <!--<directory/>-->
        <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->
        <!--<finalName/>-->
        <!--当filtering开关打开时，使用到的过滤器属性文件列表-->
        <filters/>
        <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置-->
 <!--       <pluginManagement>
            &lt;!&ndash;使用的插件列表 。&ndash;&gt;
            <plugins>
                &lt;!&ndash;plugin元素包含描述插件所需要的信息。&ndash;&gt;
                <plugin>
                    &lt;!&ndash;插件在仓库里的group ID&ndash;&gt;
                    &lt;!&ndash;<groupId/>&ndash;&gt;
                    &lt;!&ndash;插件在仓库里的artifact ID&ndash;&gt;
                    &lt;!&ndash;<artifactId/>&ndash;&gt;
                    &lt;!&ndash;被使用的插件的版本（或版本范围）&ndash;&gt;
                    <version/>
                    &lt;!&ndash;是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。&ndash;&gt;
                    <extensions/>
                    &lt;!&ndash;在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。&ndash;&gt;
                    <executions>
                        &lt;!&ndash;execution元素包含了插件执行需要的信息&ndash;&gt;
                        <execution>
                            &lt;!&ndash;执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标&ndash;&gt;
                            &lt;!&ndash;<id/>&ndash;&gt;
                            &lt;!&ndash;绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段&ndash;&gt;
                            <phase/>
                            &lt;!&ndash;配置的执行目标&ndash;&gt;
                            <goals/>
                            &lt;!&ndash;配置是否被传播到子POM&ndash;&gt;
                            <inherited/>
                            &lt;!&ndash;作为DOM对象的配置&ndash;&gt;
                            <configuration/>
                        </execution>
                    </executions>
                    &lt;!&ndash;项目引入插件所需要的额外依赖&ndash;&gt;
                    <dependencies>
                        &lt;!&ndash;参见dependencies/dependency元素&ndash;&gt;
                        <dependency>......</dependency>
                    </dependencies>
                    &lt;!&ndash;任何配置是否被传播到子项目&ndash;&gt;
                    <inherited/>
                    &lt;!&ndash;作为DOM对象的配置&ndash;&gt;
                    <configuration/>
                </plugin>
            </plugins>
        </pluginManagement>-->
        <!--使用的插件列表-->
        <plugins>
            <!-- Tell maven to compile using Java 8 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${compiler.version}</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!--参见build/pluginManagement/plugins/plugin元素-->
<!--            <plugin>
                <groupId/>
                <artifactId/>
                <version/>
                <extensions/>
                <executions>
                    <execution>
                        <id/>
                        <phase/>
                        <goals/>
                        <inherited/>
                        <configuration/>
                    </execution>
                </executions>
                <dependencies>
                    &lt;!&ndash;参见dependencies/dependency元素&ndash;&gt;
                    <dependency>......</dependency>
                </dependencies>
                <goals/>
                <inherited/>
                <configuration/>
            </plugin>-->
        </plugins>
    </build>
    <!--发现依赖和扩展的远程仓库列表。-->
    <repositories>
        <!--包含需要连接到远程仓库的信息-->
        <repository>
            <!--如何处理远程仓库里发布版本的下载-->
<!--            <releases>
                &lt;!&ndash;true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 &ndash;&gt;
                <enabled/>
                &lt;!&ndash;该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。&ndash;&gt;
                <updatePolicy/>
                &lt;!&ndash;当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。&ndash;&gt;
                &lt;!&ndash;<checksumPolicy/>&ndash;&gt;
            </releases>-->
            <!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 -->
<!--            <snapshots>
                <enabled/>
                <updatePolicy/>
                <checksumPolicy/>
            </snapshots>-->
            <!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库-->
            <id>banseon-repository-proxy</id>
            <!--远程仓库名称-->
            <name>banseon-repository-proxy</name>
            <!--远程仓库URL，按protocol://hostname/path形式-->
            <url>http://192.168.1.169:9999/repository/</url>
            <!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。-->
            <layout>default</layout>
        </repository>
    </repositories>

    <!--发现插件的远程仓库列表，这些插件用于构建和报表-->
    <pluginRepositories>
        <!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素-->
        <!--<pluginRepository>......</pluginRepository>-->
    </pluginRepositories>
</project>